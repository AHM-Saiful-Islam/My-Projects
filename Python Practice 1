''''''
exercise 1
The target of this exercise is to create two lists called x_list and y_list, which contain 10 instances of the variables x and y, respectively. 
You are also required to create a list called big_list, which contains the variables x and y, 10 times each, by concatenating the two lists you have created.
''''''

x = object()
y = object()

x_list = [x] * 10
y_list = [y] * 10
big_list = x_list + y_list

print("x_list contains %d objects" % len(x_list))
print("y_list contains %d objects" % len(y_list))
print("big_list contains %d objects" % len(big_list))

if x_list.count(x) == 10 and y_list.count(y) == 10:
    print("Almost there...")
if big_list.count(x) == 10 and big_list.count(y) == 10:
    print("Great!")

''''''
output:
    x_list contains 10 objects
    y_list contains 10 objects
    big_list contains 20 objects
    Almost there...
    Great!
''''''








''''''
exercise 2
You will need to write a format string that prints out the data using the following syntax: Hello John Doe. Your current balance is $53.44.
''''''
data = ("John", "Doe", 53.44)
format_string = "Hello %s %s. Your current balance is $%s."

print(format_string % (data[0], data[1], data[2]))

''''''
output:
    Hello John Doe. Your current balance is $53.44.
''''''







#Exercise 3
#Try to fix the code to print out the correct information by changing the string.

s = "String Capital come!"
# Length should be 20
print("Length of s = %d" % len(s))

# First occurrence of "a" should be at index 8
print("The first occurrence of the letter a = %d" % s.index("a"))

# Number of a's should be 2
print("a occurs %d times" % s.count("a"))

# Slicing the string into bits
print("The first five characters are '%s'" % s[:5]) # Start to 5
print("The next five characters are '%s'" % s[5:10]) # 5 to 10
print("The thirteenth character is '%s'" % s[12]) # Just number 12
print("The characters with odd index are '%s'" %s[1::2]) #(0-based indexing)
print("The last five characters are '%s'" % s[-5:]) # 5th-from-last to end

# Convert everything to uppercase
print("String in uppercase: %s" % s.upper())

# Convert everything to lowercase
print("String in lowercase: %s" % s.lower())

# Check how a string starts
if s.startswith("Str"):
    print("String starts with 'Str'. Good!")

# Check how a string ends
if s.endswith("ome!"):
    print("String ends with 'ome!'. Good!")

# Split the string into three separate strings,
# each containing only a word
print("Split the words of the string: %s" % s.split(" "))

''''''
output:
    Length of s = 20
    The first occurrence of the letter a = 8
    a occurs 2 times
    The first five characters are 'Strin'
    The next five characters are 'g Cap'
    The thirteenth character is 'a'
    The characters with odd index are 'tigCptlcm!'
    The last five characters are 'come!'
    String in uppercase: STRING CAPITAL COME!
    String in lowercase: string capital come!
    String starts with 'Str'. Good!
    String ends with 'ome!'. Good!
    Split the words of the string: ['String', 'Capital', 'come!']
''''''









#Exercise 4
# Change the variables in the first section, so that each if statement resolves as True.

# change this code
number = 20
second_number = 0
first_array = [1,1,1]
second_array = [1,2]

if number > 15:
    print("1")

if first_array:
    print("2")

if len(second_array) == 2:
    print("3")

if len(first_array) + len(second_array) == 5:
    print("4")

if first_array and first_array[0] == 1:
    print("5")

if not second_number:
    print("6")

''''''
output:
    1
    2
    3
    4
    5
    6
''''''










''''''
Exercise 5
Loop through and print out all even numbers from the numbers list in the same order they are received.
Don't print any numbers that come after 237 in the sequence.
''''''

numbers = [
    951, 402, 984, 651, 360, 69, 408, 319, 601, 485, 980, 507, 725, 547, 544,
    615, 83, 165, 141, 501, 263, 617, 865, 575, 219, 390, 984, 592, 236, 105, 942, 941,
    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,
    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,
    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,
    958, 609, 842, 451, 688, 753, 854, 685, 93, 857, 440, 380, 126, 721, 328, 753, 470,
    743, 527
]

# solution
for number in numbers:
    if(number == 237):
        break
        
    if(number%2 != 0):
        continue
    
    else:
        print(number)

''''''
output:
    402
    984
    360
    408
    980
    544
    390
    984
    592
    236
    942
    386
    462
    418
    344
    236
    566
    978
    328
    162
    758
    918
''''''












''''''
exercise 6
In this exercise, you'll use an existing function, and while adding your own create a fully functional program.
Add a function named list_benefits() that returns the following list of strings: "More organized code", "More readable code", 
"Easier code reuse", "Allowing programmers to share and connect code together"
Add a function named build_sentence(info) which receives a single argument containing a string and returns a sentence starting 
with the given string and ending with the string " is a benefit of functions!"
Run and see all the functions work together!
''''''

# Modify this function to return a list of strings as defined above
def list_benefits():
    return "More organized code", "More readable code", "Easier code reuse", "Allowing programmers to share and connect code together"

# Modify this function to concatenate to each benefit - " is a benefit of functions!"
def build_sentence(info):
    return "%s is a benefit of functions!" %info

def name_the_benefits_of_functions():
    list_of_benefits = list_benefits()
    for benefit in list_of_benefits:
        print(build_sentence(benefit))

name_the_benefits_of_functions()

''''''
output:
    More organized code is a benefit of functions!
    More readable code is a benefit of functions!
    Easier code reuse is a benefit of functions!
    Allowing programmers to share and connect code together is a benefit of functions!

''''''










''''''
Exercise 7
We have a class defined for vehicles. Create two new vehicles called car1 and car2. 
Set car1 to be a red convertible worth $60,000.00 with a name of Fer, and car2 to be a blue van named Jump worth $10,000.00.
''''''

# define the Vehicle class
class Vehicle:
    name = ""
    kind = "car"
    color = ""
    value = 100.00
    def description(self):
        desc_str = "%s is a %s %s worth $%.2f." % (self.name, self.color, self.kind, self.value)
        return desc_str

# your code goes here
car1 = Vehicle()
car1.name = "Fer"
car1.color = "red convertible"
car1.value = 60000.00

car2 = Vehicle()
car2.name = "Jump"
car2.color = "blue van"
car2.value = 10000.00

# test code
print(car1.description())
print(car2.description())

''''''
output:
    Fer is a red convertible car worth $60000.00.
    Jump is a blue van car worth $10000.00.

''''''










''''''
Exercise 8

''''''
phonebook = {"John" : 938477566,"Jack" : 938377264,"Jill" : 947662781}
for name, number in phonebook.items():
    print("Phone number of %s is %d" % (name, number))

''''''
Output:
Phone number of Jack is 938377264
Phone number of John is 938477566
Phone number of Jill is 947662781
''''''












''''''
source: https://www.learnpython.org/en/Welcome

''''''
